name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests Unitaires
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Run unit tests - Core functionality
      run: npx jest tests/ --runInBand --forceExit --testPathIgnorePatterns="tests/storage" --testPathIgnorePatterns="tests/e2e" 2>&1 | tee test-results-core.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288

    - name: Run unit tests - Storage modules
      run: npx jest tests/storage/ --runInBand --forceExit 2>&1 | tee test-results-storage.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288

    - name: Start MinIO for snapshot tests
      run: |
        docker run -d -p 9000:9000 --name minio-unit-tests \
          -e "MINIO_ROOT_USER=minioadmin" \
          -e "MINIO_ROOT_PASSWORD=minioadmin" \
          minio/minio server /data
        sleep 3

    - name: Run snapshot storage tests
      run: npx jest tests/storage/pulsar-storage.spec.ts tests/storage/snapshot-format.spec.ts --runInBand --forceExit 2>&1 | tee snapshot-test-results.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288
        STORAGE_TYPE: pulsar
        SNAPSHOT_INTERVAL: 30
        S3_ACCESS_KEY_ID: minioadmin
        S3_SECRET_ACCESS_KEY: minioadmin
        S3_ENDPOINT: http://localhost:9000
        S3_BUCKET: test-bucket

    - name: Run basic E2E tests (mock only)
      run: npx jest tests/e2e/simple.spec.ts --runInBand --forceExit 2>&1 | tee e2e-test-results.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          test-results-core.log
          test-results-storage.log
          snapshot-test-results.log
          e2e-test-results.log
        retention-days: 30

  test-with-pulsar:
    name: Tests E2E avec Pulsar Réel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check if secrets are available
      run: |
        echo "Checking if secrets are injected..."
        if [ -z "$ADDON_PULSAR_BINARY_URL" ]; then
          echo "ERROR: ADDON_PULSAR_BINARY_URL is not set"
          exit 1
        else
          echo "✓ ADDON_PULSAR_BINARY_URL is set"
        fi
        if [ -z "$ADDON_PULSAR_TOKEN" ]; then
          echo "ERROR: ADDON_PULSAR_TOKEN is not set"
          exit 1
        else
          echo "✓ ADDON_PULSAR_TOKEN is set"
        fi
        if [ -z "$ADDON_PULSAR_TENANT" ]; then
          echo "ERROR: ADDON_PULSAR_TENANT is not set"
          exit 1
        else
          echo "✓ ADDON_PULSAR_TENANT is set"
        fi
        if [ -z "$ADDON_PULSAR_NAMESPACE" ]; then
          echo "ERROR: ADDON_PULSAR_NAMESPACE is not set"
          exit 1
        else
          echo "✓ ADDON_PULSAR_NAMESPACE is set"
        fi
      env:
        ADDON_PULSAR_BINARY_URL: ${{ secrets.ADDON_PULSAR_BINARY_URL }}
        ADDON_PULSAR_TOKEN: ${{ secrets.ADDON_PULSAR_TOKEN }}
        ADDON_PULSAR_TENANT: ${{ secrets.ADDON_PULSAR_TENANT }}
        ADDON_PULSAR_NAMESPACE: ${{ secrets.ADDON_PULSAR_NAMESPACE }}

    - name: Run E2E tests with real Pulsar
      run: npm run test:e2e -- --forceExit 2>&1 | tee pulsar-e2e-results.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288
        ADDON_PULSAR_BINARY_URL: ${{ secrets.ADDON_PULSAR_BINARY_URL }}
        ADDON_PULSAR_TOKEN: ${{ secrets.ADDON_PULSAR_TOKEN }}
        ADDON_PULSAR_TENANT: ${{ secrets.ADDON_PULSAR_TENANT }}
        ADDON_PULSAR_NAMESPACE: ${{ secrets.ADDON_PULSAR_NAMESPACE }}
        PULSAR_TOPIC_PREFIX: "ci-test-"
        STORAGE_TYPE: "none"

    - name: Start MinIO for S3 testing
      run: |
        docker run -d -p 9000:9000 --name minio \
          -e "MINIO_ROOT_USER=minioadmin" \
          -e "MINIO_ROOT_PASSWORD=minioadmin" \
          minio/minio server /data
        
        # Wait for MinIO to be ready
        sleep 5
        
        # Install mc (MinIO client)
        wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        
        # Configure mc and create bucket
        ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
        ./mc mb myminio/test-bucket || true

    - name: Run E2E snapshot storage tests with real Pulsar and MinIO
      run: npx jest tests/e2e/snapshot-storage.spec.ts --runInBand --forceExit 2>&1 | tee snapshot-e2e-results.log; exit ${PIPESTATUS[0]}
      env:
        NODE_ENV: test
        NODE_OPTIONS: --max-old-space-size=12288
        ADDON_PULSAR_BINARY_URL: ${{ secrets.ADDON_PULSAR_BINARY_URL }}
        ADDON_PULSAR_TOKEN: ${{ secrets.ADDON_PULSAR_TOKEN }}
        ADDON_PULSAR_TENANT: ${{ secrets.ADDON_PULSAR_TENANT }}
        ADDON_PULSAR_NAMESPACE: ${{ secrets.ADDON_PULSAR_NAMESPACE }}
        S3_ACCESS_KEY_ID: minioadmin
        S3_SECRET_ACCESS_KEY: minioadmin
        S3_ENDPOINT: http://localhost:9000
        S3_BUCKET: test-bucket
        PULSAR_TOPIC_PREFIX: "ci-snapshot-test-"
        STORAGE_TYPE: "pulsar"
        SNAPSHOT_INTERVAL: "10"

    - name: Upload Pulsar test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pulsar-test-results
        path: |
          pulsar-e2e-results.log
          snapshot-e2e-results.log
        retention-days: 30

  build-demo:
    name: Build Demo
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build demo
      run: npm run build

    - name: Upload demo artifacts
      uses: actions/upload-artifact@v4
      with:
        name: demo-build
        path: demo/dist/
        retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate 2>&1 | tee security-audit-results.log

    - name: Upload security audit artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: security-audit-results.log
        retention-days: 30
